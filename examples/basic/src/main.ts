import { User, Product, ApiResponse, ContactForm } from "./types.js";

// These will be generated by the Vite plugin!
async function demonstrateValidation() {
  console.log("🚀 TypeScript Runtime Validator Demo\n");

  const userData = {
    id: 1,
    username: "johndoe",
    email: "john.doe@example.com",
    profile: {
      firstName: "John",
      lastName: "Doe",
      avatar: "https://example.com/avatar.jpg",
      bio: "Software developer passionate about TypeScript",
      location: {
        country: "United States",
        city: "San Francisco",
        timezone: "America/Los_Angeles",
      },
      socialLinks: {
        github: "https://github.com/johndoe",
        twitter: "https://twitter.com/johndoe",
      },
    },
    preferences: {
      theme: "dark" as const,
      language: "en" as const,
      notifications: {
        email: true,
        push: false,
        sms: false,
      },
      privacy: {
        profileVisibility: "public" as const,
        showEmail: false,
        showLocation: true,
      },
    },
    roles: ["user" as const, "moderator" as const],
    createdAt: new Date("2023-01-15"),
    lastLoginAt: new Date(),
    isActive: true,
  };

  const productData = {
    id: "prod-12345",
    sku: "LAPTOP-001",
    name: 'MacBook Pro 16"',
    description: "High-performance laptop for professionals",
    price: {
      amount: 2499.99,
      currency: "USD" as const,
    },
    category: {
      id: "cat-electronics",
      name: "Electronics",
      slug: "electronics",
      level: 1,
    },
    tags: ["laptop", "apple", "professional", "high-performance"],
    inventory: {
      quantity: 50,
      reserved: 5,
      available: 45,
    },
    attributes: [
      {
        name: "Screen Size",
        value: "16 inches",
        type: "text" as const,
        required: true,
      },
      { name: "RAM", value: 32, type: "number" as const, required: true },
      {
        name: "Storage",
        value: "1TB SSD",
        type: "text" as const,
        required: true,
      },
    ],
    images: [
      {
        id: "img-1",
        url: "https://example.com/laptop-1.jpg",
        alt: "Front view",
        isPrimary: true,
        sortOrder: 1,
      },
      {
        id: "img-2",
        url: "https://example.com/laptop-2.jpg",
        alt: "Side view",
        isPrimary: false,
        sortOrder: 2,
      },
    ],
    status: "active" as const,
    createdAt: new Date("2023-10-01"),
    updatedAt: new Date(),
  };

  console.log("📊 Sample Data Prepared:");
  console.log("- User data:", Object.keys(userData));
  console.log("- Product data:", Object.keys(productData));

  console.log("\n✅ All data structures are ready for validation!");
  console.log('🎯 Run "npm run build" to generate validators automatically.');

  console.log("\n📝 Generated validators will allow you to:");
  console.log("```typescript");
  console.log(
    'import { validateUser, validateProduct, isUser } from "./generated/index.js";',
  );
  console.log("");
  console.log("// Validate API data");
  console.log("const user = validateUser(unknownApiData);");
  console.log("");
  console.log("// Type guards");
  console.log("if (isUser(data)) {");
  console.log("  // data is now typed as User");
  console.log("  console.log(data.username);");
  console.log("}");
  console.log("```");

  return { userData, productData };
}

function demonstrateErrorHandling() {
  console.log("\n🔍 Error Handling Examples:");

  const invalidUserData = {
    id: "1",
    username: "johndoe",
    email: "invalid-email",
  };

  console.log("❌ Invalid data example:", invalidUserData);
  console.log(
    "✅ Validation will catch: type mismatches, missing fields, invalid formats",
  );
}

function demonstratePerformance() {
  console.log("\n⚡ Performance Benefits:");
  console.log(
    "- Validators are generated at build time (zero runtime overhead)",
  );
  console.log("- Cached validators for repeated use");
  console.log("- Tree-shakable: only used validators in bundle");
  console.log("- Faster than JSON.parse + manual validation");
}

demonstrateValidation()
  .then(() => {
    demonstrateErrorHandling();
    demonstratePerformance();
    console.log(
      "\n🎉 Demo completed! Check the generated validators after build.",
    );
  })
  .catch(console.error);

export {
  demonstrateValidation,
  demonstrateErrorHandling,
  demonstratePerformance,
};
